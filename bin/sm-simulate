#!/usr/bin/env ruby
# Benchmarks:
#   Baseline:         0.16..0.20
#   Heap Slot Tuning: 0.15..0.20

# def bench_init!; @first_time = @last_time = Time.now.to_f; end

# def bench_snap!(depth = 0)
#   t = Time.now.to_f
#   elapsed = t - @last_time
#   @last_time = t
#   key = caller[depth].split(":")[0..1].join(":").split("/").last
#   key = "TOTAL" if depth > 0
#   puts "%s => %f sec (@%f)" % [key, elapsed, t]
# end

# def bench_end!
#   @last_time = @first_time
#   bench_snap!(2)

#   # From: http://eng.rightscale.com/2015/09/16/how-to-debug-ruby-memory-issues.html
#   GC.start # Start a full garbage collection
#   s = GC.stat # Take a snapshot of the gc status
#   recommended_slots = GC.stat(:heap_live_slots) * (s[:old_objects] / s[:heap_live_slots].to_f)

#   puts s.inspect
#   puts "Recommended heap slots: #{recommended_slots}"
# end

# TODO: Run update across nodes from back to front for simulation rather than
# TODO: relying on a call-chain.  This should make it easy to eliminate the
# TODO: `yield` usage and avoid associated allocations.

# TODO: Deeper memory profiling to ensure this process can run for hours.

# TODO: Pick four downlights for the dance floor, and treat them as a separate
# TODO: simulation.  Consider how spotlighting and the like will be relevant to
# TODO: them.

#   f = Fiber.new do
#     meth(1) do
#       Fiber.yield
#     end
#   end
#   meth(2) do
#     f.resume
#   end
#   f.resume
#   p Thread.current[:name]

###############################################################################
# Early Initialization/Helpers
###############################################################################
bench_init! if defined?(bench_init!)
lib = File.expand_path("../../lib", __FILE__)
$LOAD_PATH.unshift(lib) unless $LOAD_PATH.include?(lib)
require "sparkle_motion"
require "set"

SparkleMotion.init!
SparkleMotion.use_config!
# We load the following unconditionally because so much plugs into the graph
# we don't currently have a good way of decoupling things gracefully.  So all
# USE_GRAPH=0 really means is that we don't run the simulation thread.
SparkleMotion.use_graph!

# Code loading / modular behavior configuration:
USE_LIGHTS  = env_bool("USE_LIGHTS")
USE_INPUT   = env_bool("USE_INPUT")
SKIP_INPUTS = Set.new((ENV["SKIP_INPUTS"] || "").split(/\s*,\s*/).map(&:upcase))
USE_SWEEP   = env_bool("USE_SWEEP")
USE_GRAPH   = env_bool("USE_GRAPH")
SparkleMotion.use_hue!(api: true)
SparkleMotion.use_widgets!
SparkleMotion.use_input! if USE_INPUT

# Crufty common code:
require "sparkle_motion/simulation/parameters"
require "sparkle_motion/simulation/output"
require "sparkle_motion/simulation/command_queue_task"
require "sparkle_motion/simulation/render_task"
require "sparkle_motion/simulation/surface_master_task"
require "sparkle_motion/simulation/graph_task"
require "sparkle_motion/simulation/sweeper_task"
extend SparkleMotion::Simulation::Output
extend SparkleMotion::Hue::HTTP

###############################################################################
# Profiling and Debugging
###############################################################################
LOGGER        = SparkleMotion.logger
profile_run   = ENV["PROFILE_RUN"]
PROFILE_RUN   = (profile_run != "") ? profile_run : nil
SKIP_GC       = env_bool("SKIP_GC")
DEBUG_FLAGS   = Hash[(ENV["DEBUG_NODES"] || "")
                     .split(/\s*,\s*/)
                     .map(&:upcase)
                     .map { |nn| [nn, true] }]

###############################################################################
# Shared State Setup
###############################################################################
# TODO: Run all simulations, and use a mixer to blend between them...
num_lights         = CONFIG["light_groups"]["main_lights"].length
LIGHTS_FOR_THREADS = SparkleMotion::LightConfig.new(config: CONFIG, group: "main_lights")
if USE_INPUT
  controllers = {}
  CONFIG["controllers"].each do |name, config|
    next if SKIP_INPUTS.include?(name.upcase)
    klass = config.delete("class")
    controllers[name] = Kernel.const_get(klass).new(config)
  end
  INTERACTIONS = controllers
else
  INTERACTIONS = {}
end
NODES            = {}
PENDING_COMMANDS = []
STATE = SparkleMotion::Simulation::Parameters.new("/tmp/sparkle-motion.state", LOGGER)

###############################################################################
# Simulation Graph Configuration / Setup
###############################################################################
# Root nodes (don't act as modifiers on other nodes' output):
n_cfg           = CONFIG["simulation"]["nodes"]
p_speed         = n_cfg["perlin"]["speed"]
NODES["PERLIN"] = SparkleMotion::Nodes::Generators::Perlin.new(lights: num_lights, speed: p_speed)
last            = NODES["PERLIN"]

# Transform nodes (act as a chain of modifiers):
c_cfg               = n_cfg["contrast"]
c_fun               = c_cfg["function"]
c_iter              = c_cfg["iterations"]
NODES["STRETCHED"]  = last = SparkleMotion::Nodes::Transforms::Contrast.new(function:   c_fun,
                                                                            iterations: c_iter,
                                                                            source:     last)
# Create one control group here per "quadrant"...
LIGHTS_FOR_THREADS.bridges.each_with_index do |(bridge_name, _bridge_config), idx|
  mask        = LIGHTS_FOR_THREADS.masks[bridge_name]
  int_key     = "int#{idx}"
  last        = NODES[int_key] = SparkleMotion::Nodes::Transforms::Range.new(source: last,
                                                                             mask:   mask,
                                                                             logger: LOGGER)
end

sl_key               = "spotlighting"
sl_cfg               = CONFIG["simulation"]["nodes"]["spotlighting"]
sl_base              = sl_cfg["base"]
sl_exp               = sl_cfg["exponent"]
last = NODES[sl_key] = SparkleMotion::Nodes::Transforms::Spotlight.new(source:   last,
                                                                       base:     sl_base,
                                                                       exponent: sl_exp)
FINAL_RESULT         = last # The end node that will be rendered to the lights.

NODES.each do |name, node|
  node.debug = DEBUG_FLAGS[name]
end

###############################################################################
# Operational Configuration
###############################################################################
ITERATIONS                = env_int("ITERATIONS", true) || 0
TIME_TO_DIE               = [false, :terminate]

def kick!
  LOGGER.unknown { "Kicking system in the head!" }
  TIME_TO_DIE[1] = :restart
  TIME_TO_DIE[0] = true
end

def update_group!(group, transition, data)
  bridge    = CONFIG["bridges"][group[0]]
  group_id  = bridge["groups"][group[1]]
  url       = hue_group_endpoint(bridge, group_id)
  data      = with_transition_time(transition, data)
  req       = SparkleMotion::Hue::LazyRequestConfig.new(logger, bridge, :put, url) { data }
  PENDING_COMMANDS.each { |queue| queue << req }
end

class Simulator
  attr_accessor :command_queue

  def initialize(interactions, state, logger)
    @interactions = interactions
    @state        = state
    @logger       = logger
    @screen_set   = SparkleMotion::Widgets::ScreenSet.new(interactions, state, logger)

    return unless USE_LIGHTS
    @command_queue = SparkleMotion::Simulation::CommandQueueTask.new(logger)
  end

  def load!(fname)
    instance_eval(File.read(fname), fname)
  end

  def screens(&callback)
    @screen_set.draw(&callback)
  end

  def screen(name); @screen_set.screens[name]; end

  def start
    without_persistence do
      @screen_set.start
      @state.load!
      @state.init!
    end
    @state.enabled = true
  end

  def stop
    @screen_set.stop
  end

protected

  def without_persistence(&block)
    prev = @state.enabled
    @command_queue.disable! if @command_queue
    @state.enabled = false
    block.call
  ensure
    @command_queue.enable! if @command_queue
    @state.enabled = prev
  end
end

SIM = Simulator.new(INTERACTIONS, STATE, LOGGER)
SIM.load!("config.rb")

###############################################################################
# Profiling Support
###############################################################################
def start_ruby_prof!
  return unless PROFILE_RUN == "ruby-prof"

  SparkleMotion.logger.unknown { "Enabling ruby-prof, be careful!" }
  require "ruby-prof"
  RubyProf.measure_mode = RubyProf.const_get(ENV.fetch("RUBY_PROF_MODE").upcase)
  RubyProf.start
end

def stop_ruby_prof!
  return unless PROFILE_RUN == "ruby-prof"

  result  = RubyProf.stop
  printer = RubyProf::CallTreePrinter.new(result)
  File.open("tmp/results.html", "w") do |fh|
    printer.print(fh, min_percent: 1)
  end
end

###############################################################################
# Main Simulation
###############################################################################

def launch_input_threads!(logger)
  return [] unless USE_INPUT

  INTERACTIONS
    .map { |(nn, cc)| SparkleMotion::Simulation::SurfaceMasterTask.new(nn, cc, logger) }
    .compact
end

def launch_graph_thread!(logger)
  return nil unless USE_GRAPH
  SparkleMotion::Simulation::GraphTask.new("Main", logger)
end

def launch_sweep_threads!(sweep_cfgs, command_queue, logger)
  return [] unless USE_SWEEP
  sweep_cfgs.map do |config|
    targets = config["targets"]
              .map do |(name, group)|
                bridge = CONFIG["bridges"][name]
                [bridge, bridge["groups"][group]]
              end
    SparkleMotion::Simulation::SweeperTask.new(targets:       targets,
                                               config:        config,
                                               logger:        logger,
                                               command_queue: command_queue)
  end
end

def light_thread!(bridge, transition, global_results, debug, logger)
  lights = LIGHTS_FOR_THREADS.lights[bridge["name"]]

  LOGGER.unknown do
    light_list = lights.map(&:first).join(", ")
    "#{bridge['name']}: Thread will handle #{lights.count} lights (#{light_list})."
  end

  SparkleMotion::Simulation::RenderTask.new(node:           FINAL_RESULT,
                                            bridge:         bridge,
                                            lights:         lights,
                                            transition:     transition,
                                            global_results: global_results,
                                            logger:         logger,
                                            debug:          debug)
end

def launch_command_queue_thread!(logger)
  return nil unless USE_LIGHTS
  SparkleMotion::Simulation::CommandQueueTask.new(logger)
end

def launch_light_threads!(cfg, global_results, debug, logger)
  threads = []
  return [] unless USE_LIGHTS

  transition  = cfg["transition"]
  threads    += LIGHTS_FOR_THREADS.bridges.values.map do |bridge|
    light_thread!(bridge, transition, global_results, debug, logger)
  end

  threads
end

def launch_graph_threads!(logger); [launch_graph_thread!(logger)]; end

def launch_all_threads!(config, global_results, debug, logger)
  command_queue = launch_command_queue_thread!(logger)
  PENDING_COMMANDS << command_queue if command_queue
  tmp = { input:   launch_input_threads!(logger),
          graph:   launch_graph_threads!(logger),
          sweep:   launch_sweep_threads!(config["sweepers"], command_queue, logger),
          command: [command_queue],
          lights:  launch_light_threads!(config["simulation"]["output"],
                                         global_results,
                                         debug["OUTPUT"],
                                         logger) }
  tmp.values.map(&:compact!)
  tmp[:all] = tmp.values.flatten.compact
  SIM.start
  tmp
end

def pre_init!
  trap("INT") do
    TIME_TO_DIE[0] = true
    # If we hit ctrl-c, it'll show up on the terminal, mucking with log output right when we're
    # about to produce reports.  This annoys me, so I'm working around it:
    puts
  end
  Thread.abort_on_exception = true
end

def nodes_under_debug
  NODES.select { |name, _node| DEBUG_FLAGS[name] }
end

def debugging?
  nodes_under_debug.length > 0 || DEBUG_FLAGS["OUTPUT"] || PROFILE_RUN
end

def init!(global_results)
  LOGGER.unknown { "Initializing system..." }
  if SKIP_GC
    LOGGER.unknown { "Disabling garbage collection!  BE CAREFUL!" }
    GC.disable
  end
  global_results.begin! if global_results
  start_ruby_prof!
  FINAL_RESULT.update(Time.now.to_f)
end

def wake!(threads)
  LOGGER.unknown { "Final setup done, waking threads..." }
  threads.each(&:start)
end

def spin!(threads)
  LOGGER.unknown { "Waiting for the world to end..." }
  loop do
    # Someone hit the exit button:
    break if TIME_TO_DIE[0]
    # We went through and did `ITERATIONS` update loops over the lights:
    # ... the `- 1` is for the command queue thread!
    unfinished = (threads.length - threads.count { |th| th.status == false }) - 1
    break if USE_LIGHTS && unfinished == 0
    sleep 0.25
  end
end

def stop!(threads)
  LOGGER.unknown { "Stopping threads..." }
  %i(lights command sweep graph input).each do |thread_group|
    threads[thread_group].each(&:stop)
  end
  threads[:all].map(&:await)
end

def main
  pre_init!

  announce_iteration_config(ITERATIONS)

  global_results  = SparkleMotion::Results.new(logger: LOGGER) if defined?(SparkleMotion::Results)
  threads         = launch_all_threads!(CONFIG, global_results, DEBUG_FLAGS, LOGGER)

  init!(global_results)
  wake!(threads[:all])
  spin!(threads[:lights])
  stop!(threads)

  LOGGER.unknown { "Doing final shutdown..." }
  global_results.done! if global_results
  SIM.stop

  print_results(global_results) if global_results
  dump_debug_data!
end

def profile!(&block)
  unless PROFILE_RUN == "memory_profiler"
    block.call
    return
  end

  LOGGER.unknown { "Enabling memory_profiler, be careful!" }
  require "memory_profiler"
  report = MemoryProfiler.report do
    block.call
    LOGGER.unknown { "Preparing MemoryProfiler report." }
  end
  LOGGER.unknown { "Dumping MemoryProfiler report." }
  # TODO: Dump this to a file...
  report.pretty_print
end

###############################################################################
# Launcher
###############################################################################
profile! do
  bench_end! if defined?(bench_end!)
  main
end

exit 127 if TIME_TO_DIE[1] == :restart
