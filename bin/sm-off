#!/usr/bin/env ruby

###############################################################################
# Early Initialization/Helpers
###############################################################################
lib = File.expand_path("../../lib", __FILE__)
$LOAD_PATH.unshift(lib) unless $LOAD_PATH.include?(lib)
require "sparkle_motion"
SparkleMotion.init!
SparkleMotion.use_config!
SparkleMotion.use_hue!(api: true)
LOGGER = SparkleMotion.logger
extend SparkleMotion::Hue::HTTP

###############################################################################
# Main
###############################################################################
# TODO: Allow specifying bridges, groups of lights, or just lights.
# TODO: Run this in parallel, one thread per bridge.
bridges = CONFIG["bridges"].values
desired_bridges = ARGV
                  .map { |param| param.split(/\s*,\s*/) }
                  .map do |(name, group_name)|
                    bridge = bridges.find { |bb| bb["name"] == name }
                    group_id = bridge["groups"][group_name]
                    [bridge, group_id || 0]
                  end
                  .compact
desired_bridges = bridges unless desired_bridges.length > 0
requests = desired_bridges
           .map { |(bridge, group_id)| group_update(bridge, group_id, payload: { "on" => false }) }
perform_with_retries(requests) do |request, _status, _body|
  LOGGER.info { "Broadcast to all-lights group sent to #{request.bridge['name']}!" }
end
